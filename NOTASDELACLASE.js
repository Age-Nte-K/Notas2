//EJERCICIO 1

//  ----*** üëî CLOTHES CHECKPOINT üëî ***----
//
// Felicitaciones por llegar a esta instancia! El checkpoint que realizar√°s a continuaci√≥n
// consistir√° en resolver varios problemas que surgieron en una tienda de ropa/indumentaria.
// Tendr√°s que resolver cada uno de ellos, aplicando los conceptos aprendidos durante el M√≥dulo Uno.
// üçÄ Suerte!!! üçÄ
//
//
// 1Ô∏è‚É£ ***** EJERCICIO 1 QUEUE ***** - guardarCamisetas 1Ô∏è‚É£
// 
// Ha llegado un cami√≥n con un nuevo lote de camisetas, es necesario recoger todas y guardarlas en dentro de la tienda.
// Para esto tendr√°s que implementar la funci√≥n guardarCamisetas, la cu√°l recibir√° por par√°metros una queue con muchas
// üëï Camisetas üëï que se tendr√°n que guardar en un objeto que nos servir√° como contenedor.
//
// EJEMPLOS:
// Dada la siguiente queue (INPUT):
// ["Camiseta Blanca", "Camiseta Negra", "Camiseta Azul", "Camiseta Amarilla", "Camiseta Roja"]
// guardarCamisetas() Devuelve (OUTPUT) ‚û° 
// {
//  Camiseta Blanca: Camiseta Blanca,
//  Camiseta Negra: Camiseta Negra,
//  Camiseta Amarilla: Camiseta Amarilla,
//  Camiseta Roja: Camiseta Roja
// }
//
// REQUISITOS:
//  üü¢ Respetar el principio de FIFO que corresponde a las queues a la hora de guardar las camisetas
//  üü¢ Retornar un objeto, que tendr√° como key value, los elementos que agregas y quitas de la queue
//  üü¢ SI O SI necesit√°s utilizar una queue!
// TIP: Chequear el archivo DS.js para ver la funci√≥n constructora Queue, y ver sus m√©todos disponibles.

function guardarCamisetas(queue) {
    // Tu c√≥digo aqu√≠:
    let obj = {};

    while (queue.size()) {

        let camiseta = queue.dequeue();            //camiseta es un metodo que elimina el primer elemento

        obj[camiseta] = camiseta;          //Agregamos la camiseta extra√≠da como una propiedad del obj. Agrego como propiedad a obj la misma clave y valor. su valor es igual a su clave.
    }
    return obj;
};


//EXPLICACION LOGICA
// Declaramos una variable obj que ser√° utilizada para almacenar las camisetas extra√≠das de la cola.
// Iniciamos un bucle while que se ejecutar√° mientras la cola ropaQueue tenga elementos (es decir, su tama√±o sea mayor que cero).
// Extraemos el elemento de la cola ropaQueue utilizando el m√©todo dequeue() y lo asignamos a una variable llamada camiseta.
// Agregamos la camiseta extra√≠da como una propiedad del objeto obj, y le asignamos el mismo valor que su clave.
// Continuamos en el bucle while hasta que la cola est√© vac√≠a.
// Cuando el bucle haya terminado, devolvemos el objeto obj que contiene todas las camisetas extra√≠das de la cola.




//OTRA MANERA G
function guardarCamisetas(queue) {
  // Crear un objeto vac√≠o que servir√° como contenedor de las camisetas
  const camisetas = {};

  // Iterar sobre la queue y guardar cada camiseta en el objeto contenedor
  while (!queue.isEmpty()) {
    const camiseta = queue.dequeue();
    camisetas[camiseta] = camiseta;
  }

  // Devolver el objeto contenedor de las camisetas
  return camisetas;
}

// Ejemplo de uso:
const camisetasQueue = new Queue();
camisetasQueue.enqueue("Camiseta Blanca");
camisetasQueue.enqueue("Camiseta Negra");
camisetasQueue.enqueue("Camiseta Azul");
camisetasQueue.enqueue("Camiseta Amarilla");
camisetasQueue.enqueue("Camiseta Roja");

console.log(guardarCamisetas(camisetasQueue)); // { "Camiseta Blanca": "Camiseta Blanca", "Camiseta Negra": "Camiseta Negra", "Camiseta Azul": "Camiseta Azul", "Camiseta Amarilla": "Camiseta Amarilla", "Camiseta Roja": "Camiseta Roja" }

// Explicaci√≥n:

// Luego se define la funci√≥n guardarCamisetas que recibir√° una queue como par√°metro.
// Se crea un objeto vac√≠o camisetas que servir√° como contenedor de las camisetas.
// Se itera sobre la queue usando un ciclo while y se va sacando cada camiseta con el m√©todo dequeue.
// Se guarda cada camiseta en el objeto contenedor camisetas con la sintaxis camisetas[camiseta] = camiseta.la sintaxis "camisetas[camiseta]" se utiliza para
// acceder a un elemento espec√≠fico de una matriz (array) llamada "camisetas". El valor de "camiseta" se utiliza como √≠ndice para especificar el elemento que se desea acceder en la matriz.
// Finalmente se devuelve el objeto contenedor camisetas.
// En el ejemplo de uso se crea una queue con algunas camisetas, se llama a la funci√≥n guardarCamisetas con esa queue y se muestra por consola el objeto contenedor resultante.


//EJERCICIO 2
//
// 2Ô∏è‚É£ ***** EJERCICIO 2 STACK***** - apilarPantalones() 2Ô∏è‚É£ 
// 
// Un cliente ha solicitado pantalones de una talla determinada. Es necesario ir a buscar al inventario los pantalones y obtener
// las prendas solicitadas seg√∫n su talla
// Para esto, tendr√°s que implementar la funci√≥n üëñ apilarPantalones üëñ, la cual recibir√° por par√°metros un arreglo
// conteniendo multiples tallas, adem√°s de un n√∫mero de talla a solicitar. Deber√°s retornar un objeto, el cual contendr√° una nueva pila
// con los pantalones solicitados y el arreglo anterior con los pantalones restantes
// EJEMPLOS:
// Dado el siguiente arreglo (INPUT): [37, 38, 38, 39, 41, 36, 41, 41, 37, 42]
// apilarPantalones(arreglo, 38) Devuelve (OUTPUT) ‚û°
// {
//   pantalonesEncontrados: Stack([38, 38]),
//   pantalonesRestantes: Stack([37, 39, 41, 36, 41, 41, 37, 42])
// }
// REQUISITOS:
//  üü¢ Respetar el principio de LIFO que tienen los stacks
//  üü¢ Retornar un objeto que contenga:
//  - Una propiedad "pantalonesEncontrados" que sea un stack que contenga los pantalones con la talla solicitada
//  - Una propiedad "pantalonesRestantes" que sea un stack que contenga los pantalones restantes
//  üü¢ Retornar false si el stack viene vac√≠o

//OTRA MANERA G
function apilarPantalones(arreglo, tallaSolicitada) {

  if (arreglo.length === 0) {
  return false;
  }
  
  const pantalonesEncontrados = new Stack();
  const pantalonesRestantes = new Stack();
  
  for (let i = 0; i < arreglo.length; i++) {
  const talla = arreglo[i];
  
  if (talla === tallaSolicitada) {
  pantalonesEncontrados.push(talla);
  
} else {
  pantalonesRestantes.push(talla);
  }
  }
  
  return {
  pantalonesEncontrados,
  pantalonesRestantes,
  };

  }
  
  // Ejemplo de uso:
  const arreglo = [37, 38, 38, 39, 41, 36, 41, 41, 37, 42];
  const resultado = apilarPantalones(arreglo, 38);
  console.log(resultado);
  // {pantalonesEncontrados: Stack(2) [38, 38], pantalonesRestantes: Stack(8) [37, 39, 41, 36, 41, 41, 37, 42]}


//EXPLICACION

//     La funci√≥n apilarPantalones recibe como par√°metros un arreglo llamado arreglo y un n√∫mero llamado talla.

// Se crea un stack vac√≠o llamado pantalonesEncontrados y otro stack vac√≠o llamado pantalonesRestantes.

// Se recorre el arreglo desde el final al principio utilizando un bucle for.

// Si el elemento actual es igual a la talla solicitada, se apila en pantalonesEncontrados.
// Si el elemento actual no es igual a la talla solicitada, se apila en pantalonesRestantes.
// Si el stack pantalonesRestantes est√° vac√≠o, se retorna false.

// Si el stack pantalonesRestantes no est√° vac√≠o, se crea un objeto llamado resultado que contiene las propiedades:

// pantalonesEncontrados con el stack pantalonesEncontrados
// pantalonesRestantes con el stack pantalonesRestantes
// Se retorna el objeto resultado.





//OTRA MANERA

// function apilarPantalones(array, talla) {
//   // Tu c√≥digo aqu√≠:

//   let newArray= array.reverse()
//   let encontrados= new Stack();
//   let restantes= new Stack();
   
//   while(array.length > 0){

//     let pantalon = newArray.pop()

//     if(pantalon === talla){
//       encontrados.push(pantalon)
//     }

//     else{
//       restantes.push(pantalon)
//     }
//   }


//   let obj= {}
//   obj['pantalonesEncontrados']= encontrados
//   obj['pantalonesRestantes']= restantes

//   if(encontrados.size() === 0 && restantes.size() === 0){
//     return false
  
//   }else{
//     return obj
//   }
// };



//EXPLICACION LOGICA
// Crea un objeto pantalones que contiene dos pilas vac√≠as: pantalonesEncontrados y pantalonesRestantes.

// Itera a trav√©s del array "array" y verifica si el valor del elemento en el √≠ndice actual coincide con la talla que se pasa como segundo par√°metro.

// Si es as√≠, agrega el valor a la pila pantalonesEncontrados.

// Si no coincide con la talla, agrega el valor a la pila pantalonesRestantes.

// Verifica si la pila pantalonesEncontrados tiene alg√∫n elemento. Si no hay pantalones de la talla especificada, la funci√≥n devuelve false.

// Si hay pantalones de la talla especificada, la funci√≥n devuelve el objeto pantalones con las dos pilas pantalonesEncontrados y pantalonesRestantes.

// En resumen, esta funci√≥n toma un array de pantalones y una talla espec√≠fica, y devuelve un objeto que contiene dos pilas: una pila de pantalones de la talla especificada y otra pila de pantalones que no son de la talla especificada.












//EJERCICIO 3
// 3Ô∏è‚É£ ***** EJERCICIO 3 CLOSURES***** - chequearDisponibilidad() 3Ô∏è‚É£
// Implementar la funci√≥n chequearDisponibilidad(), la cu√°l recibir√° inicialmente por par√°metros
// un arreglo con prendas de ropa.
// Despu√©s podr√° ser nuevamente invocada, recibiendo por par√°metros un arreglo de las prendas disponibles para vender
// Debes retornar el mensaje correspondiente dependiendo de cuantas prendas hayan disponibles, o
// si no hay ninguna retornar "No se encontraron las prendas solicitadas"

// EJEMPLOS:
// Se solicitan las siguientes prendas: ["Camiseta Verde", "Pantal√≥n Rojo", "Gorra Azul"]
// Y a continuaci√≥n est√° disponible el siguiente stock: ["Pantal√≥n Rojo", "Zapatos Grises", "Gorra Azul"]
// chequearDisponibilidad(prendas)(stock) Devuelve ‚û°
//  "2 de las 3 prendas solicitadas se encuentran en stock"

// O si probamos con otras prendas para solicitar: ["Pantal√≥n Rojo", "Sweater Celeste"]
// chequearDisponibilidad(prendas2)(stock) Devuelve ‚û°
// "1 de las 2 prendas solicitadas se encuentran en stock"

// REQUISITOS:
//   Retornar un mensaje que indique la cantidad de prendas disponibles acorde al stock
//   Retornar "No se encontraron las prendas solicitadas" si no se encontr√≥ disponibilidad
//   Retornar "Todas las prendas fueron encontradas" si las prendas solicitadas se encontraron
//
// ACLARACI√ìN: Chequear el output de los test, para poder colocar los mensajes como corresponden!


function chequearDisponibilidad(ropas) {

  let counter= 0;

  let comparar= function(stock){

    for(let i=0;i<ropas.length;i++){

      for(let j=0;j<stock.length;j++){
        
        if(ropas[i]===stock[j]) 
        counter++
      }
    }

    if(counter === 0) return 'No se encontraron las prendas solicitadas';
    if(counter === ropas.length) return 'Todas las prendas fueron encontradas';
    if(counter !== ropa.length) return `${counter} de las ${ropa.length} prendas solicitadas se encuentran en el stock`
  }
  
  return comparar
}

console.log(chequearDisponibilidad(["Pantal√≥n Rojo", "Gorra Azul"]) (["Pantal√≥n Rojo", "Gorra Azul"]))
console.log(chequearDisponibilidad(["Camiseta Verde", "Pantal√≥n Rojo", "Gorra Azul"])(["Pantal√≥n Rojo", "Zapatos Grises", "Gorra Azul"]))
console.log(chequearDisponibilidad(["Pantal√≥n Rojo", "Zapatos Grises", "Gorra Azul"])(["Pantal√≥n Rojo", "Zapatos Grises", "Gorra Azul"]))






//OTRA SOLUCION G
//FUNCIONA

function chequearDisponibilidad(ropas) {
    // Tu c√≥digo aqu√≠:
    return function(stock) {
        
      if (stock.length === 0) return "No se encontraron las prendas solicitadas";

        let cantDisponibles = 0;
        
        for (let i = 0; i < ropas.length; i++) {
            for (let j = 0; j < stock.length; j++) {
                if (ropas[i] === stock[j]) {
                    cantDisponibles++;
                    break;
                }
            }
        }
        
        if (cantDisponibles === ropas.length) return "Todas las prendas fueron encontradas";
        
        if (cantDisponibles > 0) {
            return cantDisponibles + " de las " + ropas.length + " prendas solicitadas se encuentran en el stock";
        
          } else {
            return "No se encontraron las prendas solicitadas";
        }
    };
}

//PRUEBAS
const prendasSolicitadas = ["Camiseta Verde", "Pantal√≥n Rojo", "Gorra Azul"];
const stockDisponible = ["Pantal√≥n Rojo", "Zapatos Grises", "Gorra Azul"];

const mensaje = chequearDisponibilidad(prendasSolicitadas)(stockDisponible);

console.log(mensaje); // "2 de las 3 prendas solicitadas se encuentran en stock"


//EXPLICACION LOGICA
// La funci√≥n chequearDisponibilidad toma un array ropas como argumento y devuelve otra funci√≥n que toma un array stock como argumento.
// Si el array stock est√° vac√≠o, la funci√≥n devuelve el mensaje "No se encontraron las prendas solicitadas".
// La funci√≥n utiliza un contador cantDisponibles para contar la cantidad de prendas que est√°n disponibles en el stock.
// Se utiliza un bucle for anidado para comparar cada elemento del array ropas con cada elemento del array stock.
// Si una prenda de ropas est√° disponible en stock, incrementamos el contador cantDisponibles y salimos del bucle interno con la instrucci√≥n break.
// Si se encontraron todas las prendas de ropas en el stock, la funci√≥n devuelve el mensaje "Todas las prendas fueron encontradas".
// Si se encontraron algunas, pero no todas las prendas de ropas en el stock, la funci√≥n devuelve un mensaje que indica cu√°ntas prendas de las solicitadas se encontraron.
// Si ninguna de las prendas de ropas se encontr√≥ en el stock, la funci√≥n devuelve el mensaje "No se encontraron las prendas solicitadas".
// En resumen, la funci√≥n chequearDisponibilidad devuelve una funci√≥n que toma un array stock como argumento y verifica si todas las prendas del array ropas est√°n presentes en el array stock. En funci√≥n de esto, se devuelve un mensaje que indica si se encontraron todas las prendas, algunas de las prendas o ninguna de las prendas.




//EJERCICIO 4
//  ***** EJERCICIO 4 RECURSI√ìN***** - atenderClientes() 
//
//
// Implementar la funci√≥n  atenderClientes() , la cual recibir√° por par√°metros un objeto
// de clientes que estar√°n esperando ser atendidos. Recursivamente debes eliminar los clientes hasta dejar el objeto vac√≠o
//
//
// EJEMPLOS:
// Dado el siguiente objeto de clientes:
// {
//  1: "Franco",
//  2: "Mar√≠a",
//  3: "Alejo"
// }
//
// atenderClientes(clientes) Devuelve ‚û° {}
//
// REQUISITOS:
//   Vaciar recursivamente el objeto de clientes y retornar el objeto vac√≠o
// 
// Tip: Pod√©s usar el operador delete para los objetos.

//FUNCIONA

function atenderClientes(clientes) {
    // Tu c√≥digo aqu√≠:
    for (const key in clientes) {
        delete clientes[key];
    }
    return clientes;
}

//EXPLICACION LOGICA
// La funci√≥n atenderClientes tiene como objetivo vaciar el objeto clientes recibido como argumento. Paso a paso:
// Aqu√≠ se define la funci√≥n atenderClientes que recibe un objeto clientes como par√°metro.
// Se utiliza un bucle for..in para recorrer todas las propiedades del objeto clientes. La variable key se usa para representar cada una propiedades del objeto.
// Dentro del bucle, se utiliza el operador delete para eliminar cada una de las propiedades del objeto clientes.
// Por √∫ltimo, se retorna el objeto clientes despu√©s de haber eliminado todas sus propiedades.
// En resumen, la funci√≥n atenderClientes elimina todas las propiedades del objeto clientes y luego retorna el objeto vac√≠o.


//FUNCIONA
function atenderClientes(clientes) {

    // Caso base: el objeto de clientes est√° vac√≠o
    if (Object.keys(clientes).length === 0) {
      return clientes;
    }
    
    // Caso recursivo: eliminar el primer cliente y llamar a la funci√≥n nuevamente
    delete clientes[Object.keys(clientes)[0]];
    return atenderClientes(clientes);
  }


//PRUEBAS

const clientes = {
    1: "Franco",
    2: "Mar√≠a",
    3: "Alejo"
  };
  
  const clientesAtendidos = atenderClientes(clientes);
  
  console.log(clientesAtendidos); // {}



//EXPLICACION
// Explicaci√≥n del c√≥digo:

// La funci√≥n atenderClientes() recibe un objeto de clientes y utiliza la funci√≥n Object.keys() para obtener un arreglo con las claves (en este caso, los n√∫meros de cliente) del objeto.
// En el caso base, se verifica si el objeto de clientes est√° vac√≠o (es decir, si el arreglo de claves tiene longitud cero). En ese caso, se retorna el objeto tal como est√°.
// En el caso recursivo, se utiliza el m√©todo delete para eliminar el primer cliente (es decir, el primer elemento del objeto) y se llama a la funci√≥n atenderClientes() nuevamente con el objeto modificado. 
// El proceso se repite hasta que el objeto est√© vac√≠o.
// En cada llamada recursiva, se retorna el resultado de la siguiente llamada.




//EJERCICIO 5 
//  ***** EJERCICIO 5 RECURSI√ìN***** - liquidacion() 
// //
// Implementar la funci√≥n  liquidacion()  la cu√°l recibir√° por par√°metros un array de objetos anidados que
// Representar√°n algunas prendas de ropa en una vidriera, cada una podr√° contener, o no, una etiqueta que indique su estado.
// Tendr√°s que recursivamente iterar el array, y retornar uno nuevo, s√≥lo con los objetos que tengan la etiqueta "LIQUIDACION" asociada.

// EJEMPLOS:
//  Dado el siguiente arreglo: [{ camiseta: { LIQUIDACION: true } }, { gorro: { DESCUENTO: true } }, { abrigo: {} }, { pantalones: { LIQUIDACION: true } }]
//  liquidacion() Devuelve ‚û°
//  [{ pantalones: { LIQUIDACION: true } }, { camiseta: { LIQUIDACION: true } }]

// REQUISITOS:
//  Retornar un nuevo arreglo que contenga las prendas de ropa en LIQUIDACION
//  Implementar recursividad!
//  Si el arreglo est√° vac√≠o, retornar un mensaje que diga "No hay prendas en liquidaci√≥n"

// CUIDADO:  las prendas tiene que ir agregandose de derecha a izquierda como se muestra en el ejemplo de mas arriba.

// TIP: tambien podes usar un rest parameter.

//FUNCIONA

function liquidacion(array, prendas = []) {
    // Tu c√≥digo aqu√≠:
    let prenda = array[0];

    if (array.length === 0) return prendas.reverse();

    for (const key in prenda) {

        if (prenda[key].hasOwnProperty("LIQUIDACION")) {
            prendas.push(prenda);
        }
    }

    array.shift();
    return liquidacion(array, prendas); //return  prendas.concat(liquidacion(array, prendas));    
}

//PRUEBAS

let prendas = [{ camiseta: { LIQUIDACION: true } }, { gorro: { DESCUENTO: true } }, { abrigo: {} }, { pantalones: { LIQUIDACION: true } }]

let prendasEnLiquidacion = liquidacion(prendas)




//EXPLICACION LOGICA
// La funci√≥n liquidacion tiene como objetivo filtrar un array de objetos que contengan una propiedad "LIQUIDACION" y retornar un nuevo array solo con estos objetos. 
//Paso por paso:
// Aqu√≠ se define la funci√≥n liquidacion que recibe dos par√°metros: array que es el array original que se desea filtrar y prendas que es un array vac√≠o donde se ir√°n almacenando los objetos que contienen la propiedad "LIQUIDACION".
// Se define una variable prenda que tomar√° el primer objeto del array original para ser evaluado en el bucle for..in.
// Si el array original est√° vac√≠o, la funci√≥n devuelve el array prendas invertido (ordenado al rev√©s) utilizando el m√©todo reverse().
// Dentro del bucle for..in, se eval√∫a cada propiedad del objeto prenda. Si una de las propiedades es "LIQUIDACION", se agrega el objeto prenda al array prendas utilizando el m√©todo push().
// Despu√©s del bucle for..in, se elimina el primer objeto del array original utilizando el m√©todo shift().
// Por √∫ltimo, se hace una llamada recursiva a la funci√≥n liquidacion pasando como argumentos el array original actualizado sin el primer objeto y el array prendas actualizado con los objetos que contienen la propiedad "LIQUIDACION". Esta llamada recursiva se repetir√° hasta que el array original quede vac√≠o y luego se devolver√° el array prendas invertido.
// En resumen, la funci√≥n liquidacion eval√∫a cada objeto del array original en busca de la propiedad "LIQUIDACION" y los agrega a un nuevo array prendas. Esto se hace utilizando una llamada recursiva hasta que el array original quede vac√≠o y luego se devuelve el array prendas invertido


//DUDOSO
//OTRA MANERA G
function liquidacion(...prendas) {
    
  if (prendas.length === 0) {
      return "No hay prendas en liquidaci√≥n";
    }
    
    const currentPrenda = prendas[0];
    
    if (typeof currentPrenda === "object" && currentPrenda !== null && currentPrenda.hasOwnProperty("LIQUIDACION")) {
      return [currentPrenda, ...liquidacion(...prendas.slice(1))];
    
    } else {
      return liquidacion(...prendas.slice(1));
    }
  }


//EXPLICACION
// La funci√≥n liquidacion utiliza un rest parameter (...prendas) para aceptar un n√∫mero variable de argumentos y as√≠ permitir el paso de un arreglo de objetos como par√°metro.
// Luego, se comprueba si el arreglo de prendas est√° vac√≠o, en ese caso se retorna un mensaje que indica que no hay prendas en liquidaci√≥n.
// Si no est√° vac√≠o, se toma el primer objeto del arreglo (const currentPrenda = prendas[0]) y se verifica si tiene la propiedad LIQUIDACION. En caso de tenerla, se agrega ese objeto al arreglo que se est√° construyendo y se llama recursivamente a la funci√≥n liquidacion pas√°ndole el resto del arreglo (...prendas.slice(1)). Si no tiene la propiedad LIQUIDACION, simplemente se llama recursivamente a la funci√≥n liquidacion pas√°ndole el resto del arreglo.
// Finalmente, la funci√≥n retorna el arreglo de prendas en liquidaci√≥n construido de forma recursiva.
// "rest parameter"  permite a una funci√≥n aceptar un n√∫mero variable de argumentos como un array. La sintaxis del par√°metro de descanso es utilizar tres puntos (...) seguidos de un nombre de variable que se utilizar√° para almacenar los argumentos adicionales que se pasan a la funci√≥n. El par√°metro de descanso es especialmente √∫til cuando no se sabe de antemano cu√°ntos argumentos se pasar√°n a una funci√≥n. Tambi√©n puede ser utilizado junto con otros par√°metros en una funci√≥n. Sin embargo, es importante tener en cuenta que el par√°metro de descanso debe ser el √∫ltimo par√°metro en la lista de par√°metros de la funci√≥n,
//El m√©todo slice() devuelve una copia de una parte del array dentro de un nuevo array empezando por inicio hasta fin (fin no incluido). El array original no se modificar√°.


//PRUEBAS







//EJERCICIO 6
//  ***** EJERCICIO 6 ALGORITMOS***** - ordenarRopa() 6
// Se desorden√≥ todo el inventario de ropa! hay prendas por todas partes.


// Por el momento tendremos que solucionar el problema creando la funci√≥n  ordenarRopa() , la cual recibir√° por par√°metros
// un array de objetos anidados, que representar√°n cada prenda. Cada objeto tendr√° dentro una propiedad nombre y un precio entero.
// Tendr√°s que implementar un algoritmo de ordenamiento para poder organizar toda la ropa de MAYOR a MENOR seg√∫n el precio.


// EJEMPLOS:
// Dado el siguiente arreglo:
// [{ nombre: 'Camiseta', precio: 12}, { nombre: 'Pantalon', precio: 2 }, { nombre: 'Saco', precio: 23 }, { nombre: 'Gorra', precio: 4 }]

// ordenarRopa(array) Devuelve ‚û°
// [{ nombre: 'Saco', precio: 23 }, { nombre: 'Camiseta', precio: 12 }, { nombre: 'Gorra', precio: 4 }, { nombre: 'Pantalon', precio: 2 }]

// REQUISITOS:
//   Implementar alg√∫n algoritmo de ordenamiento para ordenar el arreglo de MAYOR a MENOR
//   NO utilizar el m√©todo sort de array!



function ordenarRopa(ropa) {
  
  for(var i=0;i<ropa.length;i++){

    for(j=i+1;j<ropa.length;j++){

      let aux= ropa[j]

      if(aux['precio'] < ropa[i]['precio']){

        ropa[j]=ropa[i];
        ropa[i]=aux;
      }
    }
  }
  return ropa.reverse()

}

//EXPLICACION LOGICA
// La funci√≥n ordenarRopa toma como entrada un arreglo de objetos, donde cada objeto representa una prenda de vestir y tiene dos propiedades: nombre y precio. El objetivo de la funci√≥n es ordenar el arreglo de prendas de vestir en orden ascendente seg√∫n su precio.
// La funci√≥n utiliza un algoritmo de ordenamiento de burbuja (bubble sort) para lograr esto. Este algoritmo funciona comparando elementos adyacentes del arreglo y si est√°n en el orden incorrecto, los intercambia. Este proceso se repite hasta que no hay m√°s intercambios necesarios, lo que indica que el arreglo est√° ordenado.
// En el caso de la funci√≥n ordenarRopa, el primer bucle for se utiliza para recorrer todo el arreglo de ropa. El segundo bucle for se utiliza para comparar el elemento actual con el resto de los elementos del arreglo. Si se encuentra un elemento con un precio menor que el precio del elemento actual, se intercambian los elementos.
// Finalmente, la funci√≥n devuelve el arreglo ordenado en orden ascendente. La funci√≥n tambi√©n invierte el arreglo utilizando el m√©todo reverse() antes de devolverlo, para que las prendas de vestir est√©n en orden descendente seg√∫n su precio.







//OTRA MANERA G
function ordenarRopa(array) {
  let n = array.length;

  for(let i = 0; i < n-1; i++) {
    for(let j = 0; j < n-i-1; j++) {
      if(array[j].precio < array[j+1].precio) {
        let temp = array[j];
        array[j] = array[j+1];
        array[j+1] = temp;
      }
    }
  }

  return array;
}

//EXPLICACION
// podemos implementar el algoritmo de ordenamiento de burbuja. Este algoritmo compara cada elemento adyacente del array y los intercambia si est√°n en el orden equivocado. Se repite este proceso hasta que todo el array est√© ordenado.
// Se define la funci√≥n ordenarRopa que recibe como par√°metro un array de objetos anidados que representan cada prenda.
// Se define una variable n que toma el valor del tama√±o del array.
// Se utiliza un bucle anidado para iterar sobre cada elemento del array y comparar los precios de las prendas adyacentes. Si el precio de la prenda actual es menor que el precio de la siguiente prenda, se intercambian las posiciones de las prendas en el array utilizando una variable temporal temp.
// Se devuelve el array de prendas ordenado de mayor a menor seg√∫n su precio.
// En resumen, la funci√≥n ordenarRopa utiliza el algoritmo de ordenamiento burbuja para ordenar los objetos del array de prendas de mayor a menor seg√∫n su precio. Este algoritmo compara los precios de cada prenda adyacente y las intercambia de posici√≥n si la prenda actual tiene un precio menor que la siguiente prenda.




//EJERCICIO 7 
//  ***** EJERCICIO 7 ***** - LinkedList.migrarStock() 
//  La tienda de ropa necesita migrar sus datos de stock de una lista a un objeto.
//  Para esto deber√°s agregar al prototype de LinkedList el m√©todo  migrarStock() , el cual deber√° retornar todos los valores almacenados
//  de la lista en un nuevo objeto con formato nombre:stock.
//
// EJEMPLOS:
//  Dada la siguiente lista:
//
// ({nombre: 'Camisetas'}, stock: 22) ‚û° ({nombre:'Pantalones', stock: 12}) ‚û° ({nombre:'Zapatos', stock: 45}) ‚û° ({nombre: 'Bufandas', stock: 12}) ‚û° ({nombre: 'Sacos', stock: 4})
//
// lista.migrarStock() devuelve ‚û°
// {Camisetas: 22, Pantalones: 12, Zapatos: 45, Bufandas: 12, Sacos: 4}
//
//
// REQUISITOS:
//  Retornar un objeto con la prenda de ropa y su stock a modo de clave/valor mostrado en el ejemplo arriba
//  Si la lista est√° vac√≠a retornar un mensaje que diga exactamente: "No hay stock para migrar"



//Recibo una LinkedList debo retornar un objeto con los valores de la lista en formato propiedad y valor

LinkedList.prototype.migrarStock = function() {


  let obj = {}
  let current = this.head;
  
  if(!current) return "No hay stock para migrar";
  
  while(current){
  
    let prop = current.value.nombre;       //Accedo a valor de nombre
    let value = current.value.stock;       //Accedo a valor de stock
  
    obj[prop] = value;                    //Asigno formato propiedad y valor
    current = current.next;               //Paso al siguiente nodo para seguir realizando la operacion
  }
  
  return obj;
  
  }

// //EXPLICACION LOGICA
// Esta funci√≥n es un m√©todo personalizado agregado a la clase LinkedList, que se encarga de crear un objeto con las propiedades de nombre y valores de stock de cada nodo de la lista enlazada.
// La funci√≥n comienza verificando si la lista enlazada est√° vac√≠a. Si la lista enlazada est√° vac√≠a, la funci√≥n devuelve una cadena que indica que no hay stock para migrar.
// Luego, la funci√≥n declara un objeto vac√≠o llamado "obj" que se utilizar√° para almacenar las propiedades de nombre y valores de stock de cada nodo en la lista enlazada.
// A continuaci√≥n, la funci√≥n utiliza un bucle while para iterar sobre los nodos de la lista enlazada. Para cada nodo en la lista, la funci√≥n obtiene el valor del nombre de la prenda y el valor de stock y los agrega como una propiedad y valor del objeto "obj" utilizando el valor del nombre como la clave.
// Una vez que se han procesado todos los nodos de la lista enlazada, la funci√≥n devuelve el objeto "obj" con las propiedades de nombre y valores de stock de cada nodo.
// En resumen, esta funci√≥n toma la informaci√≥n almacenada en cada nodo de la lista enlazada y la convierte en un objeto con formato de propiedad y valor.




//OTRA MANERA G
LinkedList.prototype.migrarStock = function() {
  if (this.head === null) {
    return "No hay stock para migrar";
  }

  let current = this.head;
  let stockObj = {};

  while (current !== null) {
    stockObj[current.value.nombre] = current.value.stock;
    current = current.next;
  }

  return stockObj;
}

//EXPLICACION
// La funci√≥n primero verifica si la lista est√° vac√≠a. Si es as√≠, se retorna el mensaje correspondiente. 
// En caso contrario, se inicializa una variable stockObj como un objeto vac√≠o y se recorre la lista con un bucle while. 
// Por cada nodo, se obtiene el nombre y el stock de la prenda y se agrega como una clave/valor en el objeto stockObj. 
//Finalmente, se retorna el objeto stockObj con los datos de stock de todas las prendas de la lista.





//EJERCICIO 8 
//  ** EJERCICIO 8 LINKEDLIST** - tacharLista() 8
// 
// Lleg√≥ la hora de revisar el cat√°logo de ropa disponible! tendremos que tachar las que hayan se hayan agotado
// el stock
// Agregar al prototype de LinkedList el m√©todo  tacharLista()  el cu√°l recibir√° por par√°metros un array de strings,
// Tendr√°s que retornar una nueva lista en base a las prendas que hay en el array.
// Es decir, tendr√°s que agregar a la nueva lista los elementos que NO coincidan en la lista actual con el array.
//
// EJEMPLOS:
// Dada la siguiente lista de strings:
// ('Pantalon') ‚û° ('Zapatos') ‚û° ('Camisa') ‚û° ('Calcetines') ‚û° ('Gafas') ‚û° ('Sweater') ‚û°
//
// Y dado el siguiente array por par√°metros: ['Gafas', 'Zapatos']
// lista.tachar(array): Devuelve ‚û°
// ('Pantalon') ‚û° ('Camisa') ‚û° ('Calcetines') ‚û° ('Sweater') ‚û°
//
// REQUISITOS:
//  Retornar una NUEVA LinkedList en base a los elementos del arreglo recibido por par√°metros.
//  Si el arreglo viene vac√≠o retornar la LinkedList COMPLETA.
// Tip: Tanto las LinkedList como los arreglos, contendr√°n siempre strings.


//FUNCIONA


LinkedList.prototype.tacharLista = function(array) {
    // Tu c√≥digo aqu√≠:
    if (array.length === 0) return this;
    for (let i = 0; i < array.length; i++) {
        let current = this.head;
        //lista vacia
        if (!current) return this;
        //si la lista tiene un solo nodo
        if (!current.next) {
            if (current.value === array[i]) {
                this.head = null;
            }
        }
        //se busca sobre el primer nodo
        if (current.next) {
            if (current.value === array[i]) {
                this.head = current.next;
            }
        }
        //lista de un nodo o mas
        while (current.next) {
            if (current.next.value === array[i]) {
                if (current.next.next) {
                    current.next = current.next.next;
                } else {
                    current.next = null;
                }
            }
            current = current.next;
        }
    }
    return this;
};


// //EXPLICACION LOGICA
// Esta funci√≥n es un m√©todo personalizado agregado a la clase LinkedList, que se encarga de eliminar los nodos de la lista enlazada cuyo valor coincida con alguno de los valores en un arreglo de valores a eliminar.
// La funci√≥n comienza con una verificaci√≥n de que el arreglo de valores no est√© vac√≠o. Si est√° vac√≠o, la funci√≥n devuelve el objeto LinkedList original sin cambios.
// Luego, la funci√≥n itera a trav√©s del arreglo de valores y para cada valor en el arreglo, itera sobre los nodos de la lista enlazada para encontrar nodos que coincidan con ese valor.
// Si la lista enlazada est√° vac√≠a, la funci√≥n devuelve el objeto LinkedList original sin cambios.
// Si la lista enlazada tiene un solo nodo, la funci√≥n verifica si el valor del nodo coincide con el valor del arreglo y, si es as√≠, establece la cabeza de la lista en nulo.
// Si la lista enlazada tiene m√°s de un nodo, la funci√≥n busca en el primer nodo si el valor coincide con el valor del arreglo y, si es as√≠, establece la cabeza de la lista en el siguiente nodo.
// Para una lista enlazada con dos o m√°s nodos, la funci√≥n utiliza un bucle while para buscar nodos que coincidan con el valor del arreglo. Si se encuentra un nodo que coincide con el valor, se establece el "next" del nodo anterior en el "next" del nodo actual, eliminando as√≠ el nodo actual de la lista enlazada. Si el nodo actual es el √∫ltimo nodo de la lista, se establece el "next" del nodo anterior en nulo para eliminar el √∫ltimo nodo.
// Una vez que se han procesado todos los valores del arreglo, la funci√≥n devuelve el objeto LinkedList original, que ahora puede haber sufrido cambios debido a la eliminaci√≥n de nodos.





//OTRA MANERA G
LinkedList.prototype.tacharLista = function(arr) {
  const newList = new LinkedList();
  let currentNode = this.head;
  while (currentNode !== null) {
    if (!arr.includes(currentNode.value)) {
      newList.addToTail(currentNode.value);
    }
    currentNode = currentNode.next;
  }
  if (newList.isEmpty()) {
    return this;
  }
  return newList;
};


//EXPLICACION
// Crear una nueva LinkedList vac√≠a que almacenar√° los elementos que no se encuentren en el array recibido.
// Recorrer la lista actual y por cada elemento, verificar si est√° en el array recibido. Si no est√°, agregarlo a la nueva LinkedList creada en el paso 1.
// Retornar la nueva LinkedList con los elementos que no se encontraron en el array.
// Si el array recibido est√° vac√≠o, retornar la lista actual completa.
// En este c√≥digo, se crea una nueva LinkedList newList que almacenar√° los elementos que no se encuentren en el array recibido. Luego, se itera sobre la lista actual mediante un bucle while que se detiene cuando se llega al final de la lista. Por cada nodo de la lista, se verifica si su valor est√° en el array recibido mediante el m√©todo includes() de los arrays de JavaScript. Si el valor no est√° en el array, se agrega a la nueva LinkedList newList. Finalmente, se verifica si la nueva lista est√° vac√≠a. Si lo est√°, se retorna la lista original completa. Si no, se retorna la nueva lista newList.



//EJERCICIO 9
//  ***** EJERCICIO 9 BINARYSEARCHTREE***** - BinarySearchTree.obtenerPrendas() 
//
// Te han mandado a recoger una determinada prenda del inventario! Tendr√°s que buscar sobre el mismo
// Todas las que coincidan con la que te pidieron!
// Para esto tendr√°s que agregar al prototype de BinarySearchTree, el m√©todo ü©≥ obtenerPrendas() ü©≥, el cu√°l
// recibir√° por par√°metros un string, que representar√° el nombre de las prendas que se necesitan encontrar.
//
//
// EJEMPLOS:
// Dado el siguiente √°rbol:
//                          { nombre: "Camiseta", num: 13 }
//                          /                           \
//           {nombre: "Zapato", num: 7}          {nombre: "Camiseta", num: 24}
//                       /                               /                 \
//           {nombre: "Pollera", num: 6}   {nombre: "Zapato", num: 16}  {nombre: 27, num: 27}
//                     /                                                     \
//        {nombre: "Zapato", num: 3}                              {nombre: "Zapato", num: 45}
//                      \
//                  {nombre: "Zapato", num: 4}
//
//
//  BinarySearchTree.obtenerPrendas(Zapato) Devuelve ‚û°
//  ["Zapato", "Zapato", "Zapato", "Zapato"]
//
//  BinarySearchTree.obtenerPrendas(Camiseta) Devuelve ‚û°
//  ["Camiseta", "Camiseta"]
//
// REQUISITOS:
//   Recorrer el √°rbol y devolver en un array las prendas que coincidan con la solicitada
// ACLARACI√ìN: Dentro del √°rbol se encuentran objetos, tal como lo muestra el ejemplo m√°s arriba!
// TIP: Pod√©s usar default parameters para ayudarte.

//FUNCIONA

BinarySearchTree.prototype.obtenerPrendas = function(string, array = []) {
    // Tu c√≥digo aqu√≠:
    this.left && this.left.obtenerPrendas(string, array);
    this.right && this.right.obtenerPrendas(string, array);
    if (this.value.nombre === string) array.push(string);
    return array;
};


//EXPLICACION
// La l√≥gica del m√©todo es la siguiente:
// Definir una funci√≥n auxiliar buscarPrendas que reciba un nodo y un array vac√≠o como par√°metros.
// Verificar si el nodo actual es null. Si es as√≠, retornar el array vac√≠o.
// Si el nodo actual tiene un nombre que coincide con la prenda buscada, agregar su nombre al array.
// Llamar a la funci√≥n buscarPrendas con el nodo de la izquierda y el mismo array.
// Llamar a la funci√≥n buscarPrendas con el nodo de la derecha y el mismo array.
// Retornar el array con los nombres de las prendas encontradas.
// El m√©todo obtenerPrendas() simplemente llamar√° a la funci√≥n buscarPrendas() con el nodo ra√≠z del √°rbol y retornar√° el resultado. Si el par√°metro recibido por el m√©todo es un string vac√≠o, se retornar√° un array vac√≠o.



//OTRA MANERA G
BinarySearchTree.prototype.obtenerPrendas = function(prenda) {
  const prendasEncontradas = [];
  function buscarPrendas(nodo) {
    if (nodo === null) {
      return;
    }
    buscarPrendas(nodo.izquierda);
    if (nodo.valor.nombre === prenda) {
      prendasEncontradas.push(nodo.valor.nombre);
    }
    buscarPrendas(nodo.derecha);
  }
  buscarPrendas(this.raiz);
  return prendasEncontradas;
}



//EXPLICACION LOGICA
// Para resolver este ejercicio, podemos utilizar una estrategia de recorrido en orden (in-order traversal) para recorrer el √°rbol y obtener las prendas que coincidan con la solicitada.
// El recorrido in-order nos permite visitar los nodos del √°rbol en orden ascendente, es decir, primero visitando el sub√°rbol izquierdo, luego el nodo actual y finalmente el sub√°rbol derecho.
// Para implementar este recorrido en nuestro m√©todo obtenerPrendas, podemos utilizar una funci√≥n auxiliar recursiva que se encargue de visitar cada nodo del √°rbol y agregar las prendas que coincidan con la solicitada a un array que se ir√° construyendo a medida que se avanza en el recorrido.
// En esta soluci√≥n, la funci√≥n buscarPrendas es la encargada de realizar el recorrido in-order. En cada llamada recursiva, se verifica si el nodo actual es nulo (caso base) y, en caso contrario, se avanza primero en el sub√°rbol izquierdo, luego se verifica si la prenda del nodo actual coincide con la solicitada y, de ser as√≠, se agrega al array prendasEncontradas. Finalmente, se avanza en el sub√°rbol derecho.
// El m√©todo obtenerPrendas simplemente inicializa el array prendasEncontradas, llama a la funci√≥n buscarPrendas para iniciar el recorrido y retorna el array resultante.



//EJERCICIO 10 
// ***** EJERCICIO 10 BINARYSEARCHTREE***** - BinarySearchTree.vender() 
// Lleg√≥ la hora! el primer cliente se dispone a realizar la primera compra de la tienda.
// Para poder vend√©rsela, tendr√°s que agregar al prototype de BinarySearchTree, el m√©todo  vender() ,
// el cu√°l recibir√° por par√°metros un array de prendas a vender.
// Tendr√°s que recorrer el √°rbol (que contiene objetos al igual que el ejerecicio previo) y agregar la propiedad 'vendido' como valor true a cada
// uno de los nodos que coincida con los elementos del array. 
// Aclaraci√≥n: Tanto los nodos del √°rbol, como los elementos del array, ser√°n valores √∫nicos.

// EJEMPLOS:
// Dado el siguiente √°rbol:
//                         { nombre: "Camiseta", num: 20 }
//                          /                           \
//           {nombre: "Saco", num: 7}          {nombre: "Abrigo", num: 30}
//                       /                                     \
//         {nombre: "Pantalon", num: 6}               {nombre: "Gorra", num: 42}

// Y dado el siguiente arreglo: ["Gorra", "Pantalon", "Saco"];

//   BinarySearchTree.vender(arreglo) : transforma el √°rbol en ‚û°

//                             { nombre: "Camiseta", num: 20 }
//                              /                             \
//        {nombre: "Saco", num: 7, vendido: true}      {nombre: "Abrigo", num: 30 }
//                          /                                       \
// {nombre: "Pantalon", num: 6, vendido: true}            {nombre: "Gorra", num: 42, vendido: true}

// REQUISITOS:
//  Agregar la propiedad "vendido: true" a los nodos que coincidan con alguno de los elementos del array
//  Si el arreglo viene vac√≠o, la funci√≥n retorna false!


//FUNCIONA

BinarySearchTree.prototype.vender = function(array) {
    // Tu c√≥digo aqu√≠:
    if (array.length === 0) return false;
    this.left && this.left.vender(array);
    this.right && this.right.vender(array);
    for (let i = 0; i < array.length; i++) {
        if (this.value.nombre === array[i]) {
            array.splice(i, 1);
            this.value.vendido = true;
            break;
        }
    }
    return this;
};

//El m√©todo splice() cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.
//Primer parametro ndice donde se comenzar√° a cambiar el array (con 0 como origen). Si es mayor que la longitud del array, el punto inicial ser√° la longitud del array. Si es negativo, empezar√° esa cantidad de elementos contando desde el final.
//Segundo parametro Un entero indicando el n√∫mero de elementos a eliminar del array antiguo.

// //EXPLICACION LOGICA
// Esta funci√≥n es un m√©todo personalizado agregado a la clase BinarySearchTree, que se encarga de marcar como vendidas las prendas de vestir que se encuentran en un arreglo de nombres de prendas.
// La funci√≥n comienza con una verificaci√≥n de que el arreglo de prendas no est√© vac√≠o. Si est√° vac√≠o, la funci√≥n devuelve falso, ya que no se han realizado ventas.
// Luego, la funci√≥n utiliza recursi√≥n para recorrer el √°rbol binario de b√∫squeda y buscar los nodos que corresponden a las prendas que est√°n en el arreglo.
// En cada nodo, la funci√≥n itera a trav√©s del arreglo de prendas, y verifica si el nombre de la prenda coincide con el nombre del nodo. Si coincide, se marca la propiedad "vendido" del nodo como verdadera y se elimina la prenda del arreglo (utilizando la funci√≥n splice).
// Una vez que se han procesado todos los nodos, la funci√≥n devuelve "this", que es el objeto BinarySearchTree original que se utiliz√≥ para llamar al m√©todo. Esto permite que la funci√≥n sea encadenada con otros m√©todos.
// En resumen, esta funci√≥n busca prendas de vestir en un √°rbol binario de b√∫squeda y marca las prendas como vendidas si se encuentran en el arreglo de nombres de prendas. Adem√°s, elimina las prendas del arreglo a medida que se van encontrando en el √°rbol.


//OTRA MANERA G

BinarySearchTree.prototype.vender = function(prendas) {
  if (prendas.length === 0) {
    return false;
  }

  function venderRecursivo(nodo) {
    if (nodo === null) {
      return;
    }

    if (prendas.includes(nodo.nombre)) {
      nodo.vendido = true;
    }

    venderRecursivo(nodo.izquierda);
    venderRecursivo(nodo.derecha);
  }

  venderRecursivo(this.raiz);
  return true;
}



//EXPLICACION LOGICA
// Esta funci√≥n es un m√©todo personalizado agregado a la clase BinarySearchTree, que se encarga de marcar como vendidas las prendas de vestir que se pasan como argumento en un arreglo.
// La funci√≥n comienza con una verificaci√≥n de que el arreglo de prendas no est√© vac√≠o. Si est√° vac√≠o, la funci√≥n devuelve falso, ya que no se han realizado ventas.
// Luego, la funci√≥n define una funci√≥n recursiva interna llamada "venderRecursivo", que se encargar√° de recorrer el √°rbol binario de b√∫squeda para buscar las prendas en la estructura y marcarlas como vendidas.
// La funci√≥n recursiva toma un nodo como argumento y verifica si el nodo es nulo (lo que significa que no hay m√°s nodos que procesar en esa rama del √°rbol). Si el nodo no es nulo, verifica si el nombre de la prenda en ese nodo est√° incluido en el arreglo de prendas que se pasaron como argumento. Si la prenda est√° en el arreglo, se establece la propiedad "vendido" del nodo en "true", lo que indica que se ha vendido esa prenda.
// Luego, la funci√≥n recursiva se llama a s√≠ misma para procesar los nodos de la rama izquierda del √°rbol y luego los de la rama derecha. Esta recursi√≥n permite que se procesen todos los nodos del √°rbol.
// Finalmente, la funci√≥n principal llama a la funci√≥n recursiva, comenzando en la ra√≠z del √°rbol, y devuelve verdadero para indicar que se han realizado ventas en el √°rbol.
// En resumen, esta funci√≥n busca prendas de vestir en un √°rbol binario de b√∫squeda y marca las prendas como vendidas si se encuentran.



//OTRA MANERA DE HACERLO 

BinarySearchTree.prototype.vender = function (prendas) {
  // Comprobar si el arreglo de prendas a vender est√° vac√≠o
  if (prendas.length === 0) {
    return false;
  }

  // Recorrer el √°rbol y agregar la propiedad "vendido: true" a los nodos que coincidan con alguno de los elementos del array
  let actual = this.raiz;
  while (actual) {
    if (prendas.includes(actual.nombre)) {
      actual.vendido = true;
    }
    if (actual.nombre > prendas[0]) {
      actual = actual.izquierda;
    } else if (actual.nombre < prendas[0]) {
      actual = actual.derecha;
    } else {
      break;
    }
  }

  // Si el nodo ra√≠z no coincide con ning√∫n elemento del array, se llama a la funci√≥n vender() para el sub√°rbol izquierdo y derecho
  if (!actual) {
    this.izquierda.vender(prendas);
    this.derecha.vender(prendas);
  }

  return true;
};
























// Define el m√©todo vender() en el prototipo de BinarySearchTree
BinarySearchTree.prototype.vender = function(array) {
    // Recorre el array de prendas a vender
    for (let i = 0; i < array.length; i++) {
      let currentNode = this.root;
  
      // Busca el nodo correspondiente al elemento actual del array
      while (currentNode) {
        if (currentNode.valor === array[i]) {
          // Actualiza la propiedad 'vendido' del nodo
          currentNode.vendido = true;
          break;
        } else if (array[i] < currentNode.valor) {
          currentNode = currentNode.izquierda;
        } else {
          currentNode = currentNode.derecha;
        }
      }
    }
  };


//EXPLICACION

// Inicia un bucle for para recorrer los elementos del array de prendas a vender.
// Para cada elemento del array, se define una variable currentNode que inicia en la ra√≠z del √°rbol (this.root).
// Se inicia un bucle while que se ejecutar√° mientras la variable currentNode no sea null.
// Dentro del bucle while, se eval√∫a si el valor del nodo actual (currentNode.valor) es igual al elemento actual del array. Si es as√≠, se actualiza la propiedad vendido del nodo a true y se utiliza la sentencia break para salir del bucle while.
// Si el elemento actual del array es menor que el valor del nodo actual (array[i] < currentNode.valor), se actualiza la variable currentNode con el nodo de la izquierda (currentNode.izquierda).
// Si el elemento actual del array es mayor que el valor del nodo actual (array[i] > currentNode.valor), se actualiza la variable currentNode con el nodo de la derecha (currentNode.derecha).
// Cuando se termina de recorrer el array de prendas a vender, el m√©todo finaliza.
// En resumen, el m√©todo vender() recorre el √°rbol de b√∫squeda binaria para buscar los nodos que coinciden con los elementos del array de prendas a vender, y actualiza la propiedad vendido de estos nodos a true.


//OTRA MANERA EJ 10

BinarySearchTree.prototype.vender = function(arr) {
    if (arr.length === 0) {
      return false;
    }
  
    function dfs(node, arr) {
      if (!node) {
        return;
      }
  
      if (arr.includes(node.nombre)) {
        node.vendido = true;
      }
  
      dfs(node.izquierda, arr);
      dfs(node.derecha, arr);
    }
  
    dfs(this.raiz, arr);
    return this;
  }

//   Podemos probar este m√©todo con el siguiente c√≥digo:


  const arbol = new BinarySearchTree();
  arbol.insertar({nombre: "Camiseta", num: 20});
  arbol.insertar({nombre: "Saco", num: 7});
  arbol.insertar({nombre: "Abrigo", num: 30});
  arbol.insertar({nombre: "Pantalon", num: 6});
  arbol.insertar({nombre: "Gorra", num: 42});
  
  console.log(arbol.vender(["Gorra", "Pantalon", "Saco"]));

//La salida esperada es:

//   BinarySearchTree {
//     raiz:
//      Nodo {
//        valor: { nombre: 'Camiseta', num: 20 },
//        izquierda:
//         Nodo {
//           valor: { nombre: 'Saco', num: 7, vendido: true },
//           izquierda: Nodo { valor: { nombre: 'Pantalon', num: 6, vendido: true }, izquierda: null, derecha: null },
//           derecha: null },
//        derecha:
//         Nodo {
//           valor: { nombre: 'Abrigo', num: 30 },
//           izquierda: null,
//           derecha: Nodo { valor: { nombre: 'Gorra', num: 42, vendido: true }, izquierda: null, derecha: null } } } }

//EXPLICACION
//paso a paso
// La funci√≥n vender es agregada al prototype de BinarySearchTree.
// El m√©todo vender recibe un par√°metro prendas, que es un array de strings que representan las prendas a vender.
// Se verifica si el array prendas est√° vac√≠o. Si lo est√°, la funci√≥n retorna false.
// Se comienza recorriendo el √°rbol desde la ra√≠z (nodo principal).
// Si el nodo actual coincide con alguna prenda del array prendas, se agrega la propiedad vendido: true al nodo.
// Si el nodo actual no coincide con ninguna prenda del array prendas, se verifica si la prenda a buscar es menor o mayor que el nodo actual, y se procede a buscar en el sub√°rbol correspondiente.
// El proceso se repite hasta que se han recorrido todos los nodos del √°rbol.
// Una vez que se ha recorrido todo el √°rbol, la funci√≥n retorna true.





// Definir la funci√≥n vender() en el prototipo de BinarySearchTree que recibe un array como par√°metro.
// Verificar que el arreglo recibido no est√© vac√≠o. Si lo est√°, retornar false.
// Recorrer el √°rbol utilizando un algoritmo de b√∫squeda en profundidad preorden (DFS preorden).
// En cada nodo visitado, verificar si el nombre de la prenda coincide con alg√∫n elemento del arreglo recibido.
// Si la prenda coincide, agregar la propiedad "vendido: true" al objeto que representa el nodo.
// Continuar la b√∫squeda en profundidad preorden recursivamente por el sub√°rbol izquierdo y luego por el sub√°rbol derecho.
// Retornar true para indicar que la venta fue exitosa.
// Es importante destacar que este algoritmo modifica el √°rbol original, agregando la propiedad "vendido" a los nodos que correspondan. Si se desea mantener el √°rbol original intacto, se deber√° crear una copia antes de llamar a esta funci√≥n.

























// //DEFINICIONES IMPORTANTES


// Estructura de Datos: es la forma en que organizamos los datos cuando programamos. B√°sicamente, este tema trata de encontrar formas particulares de organizar datos de tal manera que puedan ser usados ‚Äã‚Äãde manera eficiente.

// Lista Enlazada: es un objeto de tipo lista, sirven para guardar una secuencia de nodos enlazados entre ellos y que contienen informaci√≥n. Podemos decir que cada nodo contiene datos y enlaces a otros nodos.

// √Årbol: son estructuras de datos que contiene una serie de nodos conectados entre ellos y que se asemeja a un √°rbol. Raiz,right,left. Caso base head === null

// Closures: Funcion que retorna otra funcion. Un closure es cuando una funci√≥n es capaz de recordar y acceder a un lexical scope, incluso cuando la funci√≥n es ejecutada por fuera del lexical scope.

// Contexto de Ejecuci√≥n: es el entorno l√©xico actual donde se est√° ejecutando el c√≥digo. Scope global o local.

// Variable THIS: el valor de this est√° determinado por c√≥mo se invoca a la funci√≥n. No puede ser establecida mediante una asignaci√≥n en tiempo de ejecuci√≥n, y puede ser diferente cada vez que la funci√≥n es invocada.

// Hoisting: es una manera general de referirse a c√≥mo funcionan los contextos de ejecuci√≥n en JavaScript. Las declaraciones de variables y funciones son asignadas en memoria durante la fase de compilaci√≥n, pero quedan exactamente en d√≥nde las has escrito en el c√≥digo.

// Pasar por valor y por referencia: Cuando pasamos algo por referencia, estamos pasando una referencia o un puntero al objeto. Por lo tanto, cualquier cambio que hagamos a esa referencia, se va a ver reflejado en el objeto original. En cambio, cuando pasamos algo por valor, estamos pasando el elemento por s√≠ mismo, o una copia de √©l.

// Algoritmo: es cualquier cosa que funcione paso a paso, donde cada paso se pueda describir sin ambig√ºedad y tiene un l√≠mite fijo en cuanto a la cantidad de datos que se pueden leer y escribir.

// Big O notation: es la expresi√≥n matem√°tica de cu√°nto tiempo tarda un algoritmo en ejecutarse dependiendo de cu√°nto tiempo es la entrada.

// Inmediatly Invoked Function Expression (IIFF): son funciones que se ejecutan tan pronto como se definen.


// - **SINGLE THREADED Y SINCR√ìNICO**
    
//     Un **thread** (o hilo de ejecuci√≥n) es la secuencia de instrucciones m√°s peque√±a que puede ser manejada por un *planificador de recursos* (se encarga de repartir el tiempo disponible de los recursos del sistema entre todos los procesos).
    
//     JavaScript es **Single Threaded** y **Sincr√≥nico**, es decir que s√≥lo puede hacer un s√≥lo comando o instrucci√≥n en cada momento y que lo hace en orden, empieza la instrucci√≥n siguiente cuando termina la anterior.


//     - **SYNTAX PARSER**
    
//     Lee el c√≥digo l√≠nea por l√≠nea y determina lo que hace cada parte. Tambi√©n chequea si la gram√°tica es correcta o no. El ***Syntax Parser*** es el int√©rprete entre tu c√≥digo y la computadora. Traduce tu c√≥digo a un lenguaje que la m√°quina puede entender.

//     - **LEXICAL ENVIROMENT**
    
//     El ***Lexical Environment*** tiene que ver con *d√≥nde* est√°n declarados ciertos statements o expresiones en tu c√≥digo. No ser√° lo mismo hacerlo en un lugar que en otro.

//     - **GLOBAL ENVIROMENT**
    
//     El **Global Enviroment** es la ventana ‚Äúpadre‚Äù del c√≥digo. El la parte m√°s externa, la que envuelve a todo el c√≥digo. Dentro de este contexto podremos encontrar otros contextos.

//     - **EXECUTION CONTEXT**
    
//     El contexto de ejecuci√≥n contiene informaci√≥n sobre **QU√â** c√≥digo se est√° ejecutando en cada momento. Esto se da en las *functions*.

//     - **CREACI√ìN Y EJECUCI√ìN**
    
//     Cuando el int√©rprete inicia el corrido del c√≥digo entra en *execution context* e inicia dos etapas. La primera (**creation phase**) y la segunda (**execution phase**). En la ***creation phase*** suceden varios procesos. Los dos m√°s importantes son el *hoisting* y la creaci√≥n del nuevo entorno. En la ***execution phase*** se ejecuta el c√≥digo.

//     - **SCOPE**
    
//     El¬†**Scope**¬†de una variable hace referencia al lugar donde esta va a vivir , o podr√° ser accesible. Podr√≠amos decir tambi√©n que¬†**Scope**¬†es el alcance que determina la accesibilidad de las variables en cada parte de nuestro c√≥digo.
    
//     Cada contexto maneja sus propias variables, y son independientes de los dem√°s. Justamente por eso, podemos usar los mismos nombres de variables dentro de funciones que creamos sin que *pisen* las dem√°s.
    
//     Tambi√©n sabemos que podemos acceder a una variable declarada en el contexto global dentro de una funci√≥n. Esto se debe a que JavaScript primero busca una variable dentro del contexto que se est√° ejecutando, si no la encuentra ah√≠, usa la referencia al `outer context` para buscarla dentro de ese contexto.


//     VALOR Y REFERENCIA

//     En este caso estamos pasando variables por valor. Al comienzo a y b son distintas. Luego a se hace ‚Äúfotocopia‚Äù de b y adquiere su valor. Si luego cambiamos el valor de b, el valor de a se seguir√° manteniendo igual, ya que mantiene independencia. Las variables que se pasan por valor son los datos primitivos.


//     Cuando pasamos objetos, arreglos o funciones en variables lo haremos por referencia. En ese caso hay un ‚Äúreflejo‚Äù de los cambios que hagamos en cualquiera de las variables. En el ejemplo primero creamos un objeto, y luego definimos un nuevo objeto que es igual al primero. Cuando al primero le agregamos la propiedad Edad, esta se agregar√° autom√°ticamente a la segunda.


//     - **THIS**
    
//     Cuando se crea el `execution context`, el interprete reserva el espacio de memoria para las variables (hoisting), guarda la referencia al `outer enviroment` y adem√°s ‚Äúsetea‚Äù la variable `this`. Esta variable va a apuntar a distintos objetos dependiendo en c√≥mo fue invocada la funci√≥n.



//     - **EVENT LOOP**
    
//     **setTimeout()** es una funci√≥n integrada en Javascript que nos permitir√° retrasar el proceso de una funci√≥n. Existe un espacio llamado ‚Äú***Web Apis***‚Äù en el que es enviado el proceso de esta funci√≥n. De esta forma JavaScript puede seguir procesando el c√≥digo sin perder el tiempo en esa funci√≥n.
    
//     Hay que destacar que, una vez enviado el **setTimeout** al **Web Apis**, JavaScript procesar√° el resto del c√≥digo, y s√≥lo recibir√° el proceso terminado del Web Apis una vez terminada la lectura del c√≥digo.
    
//     Una vez que el **setTimeout** se termin√≥ de procesar en el Web Apis, pasar√° al **Callback Queue**. Aqu√≠ ser√°n enviados todos los procesos que JavaScript deriva, y como dijimos, una vez que el int√©rprete termina de leer el c√≥digo, reci√©n ah√≠ ser√°n reintegrados al **Call Stack**.



//     - **ESTRUCTURA DE DATOS**
//     - **¬øQu√© es una estructura de datos?**
        
//         Las estructuras de datos son el estudio de las distintas formas en las que se puede organizar la informaci√≥n. El objetivo es que la b√∫squeda e inserci√≥n de datos sea lo m√°s eficiente posible.
        
//         Dentro del mundo de la programaci√≥n existen much√≠simas estructuras de datos. Una que ya conocemos, por ejemplo, son los arreglos. Estos pueden guardar valores de forma lineal (uno despu√©s de otro).
        
//         > Pensemos en que los datos que tenemos que manejar son libros. En un principio tenemos much√≠simos libros desordenados por toda la casa. Cada vez que queremos leer un libro tardamos cerca de dos horas buscando uno por uno hasta encontrarlo. ¬°Esto es ineficiente! Para solucionar este problema podr√≠amos crear una biblioteca. All√≠ acomodaremos todos los libros por orden alfab√©tico, y encontrarlos ser√° mucho m√°s sencillo. La biblioteca es nuestra estructura de datos.
//         >


//         - **ARRAY**
    
//         Los **arreglos** 
//         son una estructura de datos nativa que tienen todos los lenguajes de programaci√≥n (¬°y que ya conoces!). Estos son una colecci√≥n finita de elementos del mismo tipo que ocupan espacios contiguos de la memoria. Se puede acceder a cada uno a trav√©s de su √≠ndice.
//         Una de sus ventajas es que la inserci√≥n de elementos al principio o al final es muy sencilla de hacer(push y shift). Pero buscar o eliminar elementos dentro de √©l tiene un poco m√°s de dificultad.

//         ¬°Claro! Para crear un array con objetos dentro en JavaScript, puedes seguir esta sintaxis:


let miArray = [
  {nombre: "Juan", edad: 25},
  {nombre: "Mar√≠a", edad: 30},
  {nombre: "Pedro", edad: 20}
];

// En este caso, el array contiene tres objetos, cada uno con una propiedad "nombre" y una propiedad "edad". Puedes acceder a las propiedades de cada objeto utilizando la sintaxis de punto o de corchetes, como en este ejemplo:


console.log(miArray[0].nombre); // "Juan"
console.log(miArray[1]["edad"]); // 30

// En el primer ejemplo, estamos accediendo a la propiedad "nombre" del primer objeto en el array, utilizando la sintaxis de punto. En el segundo ejemplo, estamos accediendo a la propiedad "edad" del segundo objeto en el array, utilizando la sintaxis de corchetes.


// Para buscar un objeto en una posici√≥n espec√≠fica de un array, puedes utilizar la sintaxis de corchetes para acceder a ese √≠ndice del array. En este caso, si quieres buscar el objeto en la posici√≥n 1 del array, puedes hacer lo siguiente:


let miArray = [
  {nombre: "Juan", edad: 25},
  {nombre: "Mar√≠a", edad: 30},
  {nombre: "Pedro", edad: 20}
];

let objetoBuscado = miArray[1];

console.log(objetoBuscado); // {nombre: "Mar√≠a", edad: 30}

// Para eliminar un objeto de una posici√≥n espec√≠fica de un array, puedes utilizar el m√©todo splice(). Este m√©todo toma dos par√°metros: el primer par√°metro indica el √≠ndice del array donde comenzar√° la eliminaci√≥n, y el segundo par√°metro indica el n√∫mero de elementos que se eliminar√°n. En este caso, si quieres eliminar el objeto en la posici√≥n 1 del array, puedes hacer lo siguiente:


let miArray = [
  {nombre: "Juan", edad: 25},
  {nombre: "Mar√≠a", edad: 30},
  {nombre: "Pedro", edad: 20}
];

miArray.splice(1, 1);

console.log(miArray); // [{nombre: "Juan", edad: 25}, {nombre: "Pedro", edad: 20}]

// En este ejemplo, estamos eliminando un solo elemento a partir del √≠ndice 1 del array, lo que resultar√° en la eliminaci√≥n del objeto en la posici√≥n 1. El array resultante contiene solo los objetos en las posiciones 0 y 2.


// ¬øQu√© es una variable en programaci√≥n y c√≥mo se declara en JavaScript?

// Una variable en programaci√≥n es un contenedor que se utiliza para almacenar datos en la memoria de un programa. En JavaScript, las variables se declaran utilizando la palabra clave var, let o const, seguida del nombre de la variable y, opcionalmente, un valor inicial



// ¬øCu√°l es la diferencia entre una funci√≥n y un m√©todo en JavaScript?

// na funci√≥n es un bloque de c√≥digo que se puede llamar para realizar una tarea espec√≠fica. Las funciones pueden tomar argumentos y devolver un valor. 
//Por otro lado, un m√©todo es una funci√≥n que est√° asociada a un objeto y se puede llamar a trav√©s de ese objeto. La principal diferencia entre una funci√≥n y un m√©todo es que un m√©todo est√° vinculado a un objeto espec√≠fico, mientras que una funci√≥n no est√° vinculada a ning√∫n objeto en particular.

// Escribe una funci√≥n en JavaScript que reciba un n√∫mero como par√°metro y devuelva el n√∫mero al cuadrado.

function cuadrado(numero) {
    return numero * numero;
  }
  
  // Ejemplo de uso de la funci√≥n
  console.log(cuadrado(5)); // Devuelve 25

// ¬øQu√© es una estructura de control de flujo en programaci√≥n y cu√°les son las estructuras de control de flujo m√°s comunes en JavaScript?

// Una estructura de control de flujo es un conjunto de instrucciones que se utilizan para controlar el flujo de ejecuci√≥n de un programa. En JavaScript, las estructuras de control de flujo m√°s comunes son:
// if / else: se utiliza para tomar decisiones basadas en una condici√≥n.

// for: se utiliza para ejecutar un bloque de c√≥digo varias veces, generalmente con una variable de contador.

// while: se utiliza para ejecutar un bloque de c√≥digo mientras se cumpla una condici√≥n.

// switch: se utiliza para tomar decisiones basadas en m√∫ltiples condiciones.

// try / catch: se utiliza para manejar errores y excepciones.

// ¬øQu√© es un array en programaci√≥n y c√≥mo se puede acceder a un elemento espec√≠fico en JavaScript? 